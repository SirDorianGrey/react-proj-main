{"ast":null,"code":"const availableTimesByDate = {\n  '2023-08-29': ['10:00', '11:00', '12:00'],\n  '2023-09-01': ['10:00', '11:00', '12:00'],\n  '2023-09-02': ['14:00', '15:00', '16:00'],\n  '2023-09-03': ['10:00', '11:00', '12:00'],\n  '2023-09-04': ['14:00', '15:00', '16:00'],\n  '2023-09-05': ['10:00', '11:00', '12:00'],\n  '2023-09-06': ['14:00', '15:00', '16:00'],\n  '2023-09-07': ['10:00', '11:00', '12:00'],\n  '2023-09-08': ['14:00', '15:00', '16:00'],\n  '2023-09-09': ['10:00', '11:00', '12:00'],\n  '2023-09-10': ['14:00', '15:00', '16:00'],\n  '2023-09-11': ['10:00', '11:00', '12:00'],\n  '2023-09-12': ['14:00', '15:00', '16:00'],\n  '2023-09-13': ['10:00', '11:00', '12:00'],\n  '2023-09-14': ['14:00', '15:00', '16:00'],\n  '2023-09-15': ['10:00', '11:00', '12:00'],\n  '2023-09-16': ['14:00', '15:00', '16:00'],\n  '2023-09-17': ['10:00', '11:00', '12:00'],\n  '2023-09-18': ['14:00', '15:00', '16:00'],\n  '2023-09-19': ['10:00', '11:00', '12:00'],\n  '2023-09-20': ['14:00', '15:00', '16:00']\n};\nconst fetchAPI = date => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (availableTimesByDate[date]) {\n        resolve(availableTimesByDate[date]);\n      } else {\n        reject(new Error('No available times for the selected date.'));\n      }\n    }, 1000);\n  });\n};\nconst submitAPI = formData => {\n  availableTimesByDate[formData.date] = availableTimesByDate[formData.date].filter(time => time !== formData.time);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (formData) {\n        resolve(true); // Simulate successful submission\n      } else {\n        reject(new Error('Form submission failed.'));\n      }\n    }, 1000); // Simulate API delay\n  });\n};\n\nexport { fetchAPI, submitAPI };","map":{"version":3,"names":["availableTimesByDate","fetchAPI","date","Promise","resolve","reject","setTimeout","Error","submitAPI","formData","filter","time"],"sources":["/Users/doriangrey/Desktop/projects/Front-End Dev Capstone/react-proj-main/src/mockAPI.js"],"sourcesContent":["const availableTimesByDate = {\r\n    '2023-08-29': ['10:00', '11:00', '12:00'],\r\n    '2023-09-01': ['10:00', '11:00', '12:00'],\r\n    '2023-09-02': ['14:00', '15:00', '16:00'],\r\n    '2023-09-03': ['10:00', '11:00', '12:00'],\r\n    '2023-09-04': ['14:00', '15:00', '16:00'],\r\n    '2023-09-05': ['10:00', '11:00', '12:00'],\r\n    '2023-09-06': ['14:00', '15:00', '16:00'],\r\n    '2023-09-07': ['10:00', '11:00', '12:00'],\r\n    '2023-09-08': ['14:00', '15:00', '16:00'],\r\n    '2023-09-09': ['10:00', '11:00', '12:00'],\r\n    '2023-09-10': ['14:00', '15:00', '16:00'],\r\n    '2023-09-11': ['10:00', '11:00', '12:00'],\r\n    '2023-09-12': ['14:00', '15:00', '16:00'],\r\n    '2023-09-13': ['10:00', '11:00', '12:00'],\r\n    '2023-09-14': ['14:00', '15:00', '16:00'],\r\n    '2023-09-15': ['10:00', '11:00', '12:00'],\r\n    '2023-09-16': ['14:00', '15:00', '16:00'],\r\n    '2023-09-17': ['10:00', '11:00', '12:00'],\r\n    '2023-09-18': ['14:00', '15:00', '16:00'],\r\n    '2023-09-19': ['10:00', '11:00', '12:00'],\r\n    '2023-09-20': ['14:00', '15:00', '16:00'],\r\n  };\r\n\r\n\r\n  const fetchAPI = (date) => {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() =>{\r\n            if(availableTimesByDate[date]){\r\n                resolve(availableTimesByDate[date])\r\n            }\r\n            else{\r\n                reject(new Error('No available times for the selected date.'));\r\n            }\r\n        } , 1000)\r\n    })\r\n  }\r\n\r\n  const submitAPI = (formData) => {\r\n    \r\n    availableTimesByDate[formData.date] = availableTimesByDate[formData.date].filter(time => time !== formData.time);\r\n\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        if (formData) {\r\n          resolve(true); // Simulate successful submission\r\n        } else {\r\n          reject(new Error('Form submission failed.'));\r\n        }\r\n      }, 1000); // Simulate API delay\r\n    });\r\n  };\r\n\r\n  export{fetchAPI,submitAPI}"],"mappings":"AAAA,MAAMA,oBAAoB,GAAG;EACzB,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC;EACzC,YAAY,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO;AAC1C,CAAC;AAGD,MAAMC,QAAQ,GAAIC,IAAI,IAAK;EACzB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpCC,UAAU,CAAC,MAAK;MACZ,IAAGN,oBAAoB,CAACE,IAAI,CAAC,EAAC;QAC1BE,OAAO,CAACJ,oBAAoB,CAACE,IAAI,CAAC,CAAC;MACvC,CAAC,MACG;QACAG,MAAM,CAAC,IAAIE,KAAK,CAAC,2CAA2C,CAAC,CAAC;MAClE;IACJ,CAAC,EAAG,IAAI,CAAC;EACb,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,SAAS,GAAIC,QAAQ,IAAK;EAE9BT,oBAAoB,CAACS,QAAQ,CAACP,IAAI,CAAC,GAAGF,oBAAoB,CAACS,QAAQ,CAACP,IAAI,CAAC,CAACQ,MAAM,CAACC,IAAI,IAAIA,IAAI,KAAKF,QAAQ,CAACE,IAAI,CAAC;EAEhH,OAAO,IAAIR,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtCC,UAAU,CAAC,MAAM;MACf,IAAIG,QAAQ,EAAE;QACZL,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB,CAAC,MAAM;QACLC,MAAM,CAAC,IAAIE,KAAK,CAAC,yBAAyB,CAAC,CAAC;MAC9C;IACF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ,CAAC;;AAED,SAAON,QAAQ,EAACO,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}